#include "camera.h"
#include "vars.h"

int startpY = 0; // inizio del dato
int startpB = 0;
int endpY = 0; // fine del dato
int endpB = 0;
String valStringY = ""; // stringa dove si vanno a mettere i pacchetti di dati ricevuti
String valStringB = "";
int datavalid = 0; // segnalo se il dato ricevuto Ã¨ valido
int oldGoalY,oldGoalB;

void goalPosition() {
  int valY; // variabile a cui attribuisco momentaneamente il valore dell x
            // della porta

  int valB;

  portx = 999;
  while (CAMERA.available()) {
    // get the new byte:
    char inChar = (char)CAMERA.read();
    // DEBUG_PRINT.write(inChar);
    // if the incoming character is a 'Y', set the start packet flag
    if (inChar == 'Y') {
      startyY = 1;
    }
    // if the incoming character is a 'Y', set the start packet flag
    if (inChar == 'B') {
      startyB = 1;
    }
    // if the incoming character is a '.', set the end packet flag
    if (inChar == 'y') {
      endyY = 1;
    }
    // if the incoming character is a '.', set the end packet flag
    if (inChar == 'b') {
      endyB = 1;
    }
    if (inChar == 'U') {
      startxY = 1;
    }
    if (inChar == 'N') {
      startxB = 1;
    }
    if(inChar == 'u') {
      endxY = 1;
    }
    if (inChar == 'n') {
      endxY = 1;
    }

    if ((startyY == 1) && (endyY == 0)) {
      if (isDigit(inChar)) {
        // convert the incoming byte to a char and add it to the string:
        valStringyY += inChar;
      }
    }
    if ((startxY == 1) && (endxY == 0)) {
      if (isDigit(inChar)) {
        // convert the incoming byte to a char and add it to the string:
        valStringxY += inChar;
      }
    }

    if ((startyB == 1) && (endyB == 0)) {
      if (isDigit(inChar)) {
        // convert the incoming byte to a char and add it to the string:
        valStringyB += inChar;
      }
    }
    if ((startxB == 1) && (endxB == 0)) {
      if (isDigit(inChar)) {
        // convert the incoming byte to a char and add it to the string:
        valStringxB += inChar;
      }
    }

    if ((startyY == 1) && (endyY == 1)) {
      valyY = valStringyY.toInt(); // valid data
      valStringyY = "";
      startyY = 0;
      endyY = 0;
      datavalid ++;
    }
    if ((startxY == 1) && (endxY == 1)) {
      valxY = valStringxY.toInt(); // valid data
      valStringxY = "";
      startxY = 0;
      endxY = 0;
      datavalid ++;
    }
    if ((startyB == 1) && (endyB == 1)) {
      valyB = valStringyB.toInt(); // valid data
      valStringyB = "";
      startyB = 0;
      endyB = 0;
      datavalid ++;
    }
    if ((startxB == 1) && (endxB == 1)) {
      valxB = valStringxB.toInt(); // valid data
      valStringxB = "";
      startxB = 0;
      endxB = 0;
      datavalid ++;
    }

  } // end of while

  if (valxY != 0)
    oldGoalxY = valxY;
  if (valxB != 0)
    oldGoalxB = valxB;

  if (valxY == 0)
    valxY = oldGoalxY;
  if (valxB == 0)
    valxB = oldGoalxB;
  
  if (valyY != 0)
    oldGoalyY = valyY;
  if (valyB != 0)
    oldGoalyB = valyB;

  if (valyY == 0)
    valyY = oldGoalyY;
  if (valyB == 0)
    valyB = oldGoalyB;

  if (datavalid > 1) {  ///entro qui solo se ho ricevuto i pacchetti completi sia del blu che del giallo
    if(goal_orientation == 1){
      //yellow goalpost
      pAtk = valY;
      pDef = valB;
    }else{
      //blue goalpost
      pAtk = valB;
      pDef = valY;
    }

    datavalid = 0;
    cameraReady = 1;  //attivo flag di ricezione pacchetto
  }
  // update_location_complete();
  // if (portx == 0)
  //   portx = 999;
}
// un numero grande equivale a stare a destra, piccolo a sinistra


//fix the camera value change caused by the robot twist
int imuOff, fst;
int fixCamIMU(int d){
    //fix for camera distortion when the robot twists
    if(imu_current_euler > 30 && imu_current_euler < 180) imuOff = 30;
    else if(imu_current_euler < 330 && imu_current_euler >= 180) imuOff = -30;
    else if (imu_current_euler <= 360 && imu_current_euler >= 330) imuOff = imu_current_euler - 360;
    else imuOff = imu_current_euler;

    fst = map(imuOff, -45, 45, -110, 110);
    return d - fst;
}


